# Part a
class SaleData:
    def __init__(self):
        self.id = ""
        self.quantity = -1


# Part b
CircularQueue = [SaleData() for i in range(5)]
# Head and Tail are integers
# NumberOfItems is an integer
for i in range(5):
    CircularQueue[i].id = ""
    CircularQueue[i].quantity = -1
Head = 0
Tail = 0
NumberOfItems = 0


# Part c
def Enqueue(new_record):
    global Tail, NumberOfItems
    if NumberOfItems == len(CircularQueue):
        return -1
    else:
        CircularQueue[Tail] = new_record
        if Tail == len(CircularQueue) - 1:
            Tail = 0
        else:
            Tail += 1
        NumberOfItems += 1
        return 1


# Part d
def Dequeue():
    global Head, NumberOfItems
    x = SaleData()
    if NumberOfItems == 0:
        x.id = ""
        x.quantity = -1
    else:
        x = CircularQueue[Head]
        if Head == len(CircularQueue) - 1:
            Head = 0
        else:
            Head += 1
        NumberOfItems -= 1
    return x


# Part e
def EnterRecord():
    z = SaleData()
    z.id = input("Enter id: ")
    z.quantity = int(input("Enter Quantity: "))
    y = Enqueue(z)
    if y == -1:
        print("Full")
    else:
        print("Stored")


# Part f
for i in range(6):
    EnterRecord()

j = Dequeue()
print(j.id, j.quantity)
EnterRecord()
for i in range(5):
    print(CircularQueue[i].id, "\t", CircularQueue[i].quantity)
